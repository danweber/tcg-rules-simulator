
# How To Add New Parsing

Let's take a sample effect, <De-Evolve>. (There is already code to make devolve happen, we just need to hook up the front end.)

Sample sentence we want to parse, as a sentence

    Then, if this Monster is suspended, ＜De-Evolve 1＞ 1 of your opponent's Monster.

In the Nearly file for the grammar, look at "EffSentence." (Despite its name it can sometimes read more than one sentence.) You can see how we want this parsed:

    (Then, )                                      -> Discarded
    if this Monster is suspended,                 -> IfClause
    ＜De-Evolve 1＞ 1 of your opponent's Monster. -> Imperative

The IfClause is easy to add:

     ("If " | "if ") MultiTarget (" is " | " has ") "un":? "suspended, "

A very common test is if a thing exists, and "X is suspended" is easily enough rephased into "a suspended X".

     { raw_text:gv(d),
       type: 'IfClause',
       testtype: "TARGET_EXISTS",
       and: [ ... ]
     }

So into the "and" we put the tests necessary to test for a suspended X:

        and: [
            d[1],
            { raw_text: 'is suspended', suspended: true }            
        ]

Then to add the new action of <De-Evolve>:

    | "＜De-Evolve " Number "＞ " MultiTarget

and its return

     { raw_text:gv(d),  action: 'devolve', 
       target: d[2],
       number: gv(d[1])
     }

# How To Add Face-Down Cards

Let's walk through the entire process for adding face-down cards on the field. This is a really good example because it's going to up-end some prior assumptions and require changes at multiple levels.

## Test data format

There's no way of describing face-down cards in our test input or output. Obviously that's the first thing we need.

We have some precedent for face-up in security. In place of a REST status at the end, security can have FACEUP:

    SECURITY1:DW1-Van,FACEUP DW1-Van,FACEUP CS2-03,FACEUP DW1-Van

And for plugged cards:

    Four2,CS1-06,PLUG,CS3-Fairy

Let's merge these. Before each card that is faceup, let there be a FACEUP value.

So a normal stack is:

    Sample,DW1-Van,CS1-Garbage,CS1-Paper,CS1-Tiny

Now we'll make cards be facedown by adding FACEDOWN as a flag after each card.

    Sample,DW1-Van,FACEDOWN,CS1-Garbage,CS1-Paper,FACEDOWN,CS1-Tiny

This makes the 2nd and 4th cards from the top be facedown.

Off in Player.ts, we have the _set_up function. The second clause is optional but will let us force face-up if we ever need it.

                    if (text == "PLUG") {
                        plug = true;
                        continue;
                    }
                    if (text == "FACEDOWN") {
                        faceup = false;
                        continue;                        
                    }

Then, after we make a card, use the faceup value and reset it to default

                    if (c) {
                        c.face_up = faceup;
                        faceup = true; // return to default

In theory this is enough. And passing the sample text as input doesn't generate any errors. But we need to check on the output as well.

Output is handled in Instance.ts. (This isn't the same file as the input, and if you think that's a code-smell, you're right.)

        let body = this.pile.map(x => x.testname(testmode)).reverse();

`x.testname()` is how we dump card data for test output. That's where we need to label each card.

        let prefix = "";
        if (!this.face_up) {
            prefix = "FACEDOWN,";
        }

Then we make sure prefix is sent before each card.

Let's see the tests!

Input:

    VERSION:2
    FIELD1:Sample,DW1-Van,FACEDOWN,CS1-Garbage,CS1-Paper,FACEDOWN,CS1-Tiny
    GAME:P1 T3 MAIN 6
    DUMP

Output:

    FIELD1:Sample,FACEDOWN,DW1-Vanillamon,FACEDOWN,CS1-Garbagecanlid,FACEDOWN,CS1-Papershield,FACEDOWN,CS1-Tinyshield
    FIELD2:
    GAME:P1 T3 MAIN 6

Oh no! All cards are facedown. Back in Player.ts, cards were set up faceup or facedown, and then moved to their new location. Moving the card automatically flips it to the proper orientation for that location. (Check that code and see.) So, move the setting to after the card is moved:

                        if (plug) {
                            c.move_to(place, thing, "PLUG-BOTTOM");
                        } else {
                            c.move_to(place, thing, "BOTTOM");
                        }
                        c.face_up = faceup;

Note that we could technically have face-down linked card if we wanted. We're going to ignore that for this project but a fun follow-up could be seeing if a face-down link card is trashed at rule check. (I guess it should. But it's an undefined mechanic, so who knows?)

Now the output:

    FIELD1:Sample,DW1-Vanillamon,FACEDOWN,CS1-Garbagecanlid,CS1-Papershield,FACEDOWN,CS1-Tinyshield
    FIELD2:
    GAME:P1 T3 MAIN 6
    
Yes! Now run all the other tests...

... It turns out that the face-up-ness of field cards was never really tested. When cards were moved to instances we weren't marked the face-up-ness. Now they are explicitly marked as default face-up if moved to the field, otherwise face down.

To here, everything is 0.9.34.1.0.

## Parsing

So now let's get an effect working. When working with complicated effects, break them down into pieces. So we make a new test card, or modify an existing test card, to have this effect.
 
    You may place 1 card in your hand face down as this Monster's bottom evolution card.

Does this parse? Run `node ./parse-evocond.js` on a file with this as its content. Once it doesn't, try several variations.

    >> You may place 1 card in your hand face down as this Monster's bottom evolution card.
    null
    >> You may place 1 card in your hand as this Monster's bottom evolution card.
    null
    >> Place 1 card in your hand as this Monster's bottom evolution card.
    found 1 results for Place 1 card in your hand as this Monster's bottom evolution card.

So we needed to make sure that the specific kind of place worked, which involved added one more variation of "place" in the grammar.

Then we need to make sure that "place X face down" is accepted.

     | ("place " | "placing "|"Place ") MultiTarget " face down":? (" as "|" under ") MultiTarget ("'s bottom evolution card" | " as its bottom evolution card") " or under ":?  Target:?

Parse that and it works! (Long output elided.) But run through all the test cases before committing.

That's 0.9.34.1.1.

## Making the code do the right thing.

If you run the above effect, it does put a card into the place it should -- but face up. We're almost there!

(Also, a "put face up into security" effect was newly caught by the grammar. That's good, but the new code wasn't handling it. That was disabled in a way that you can see, do we're only fixing one thing at a time.)

A lot of the code needed was already here. All we needed to change was to make, instead of sometimes explicitly setting the card face up, was to also explicitly sometimes set the card face down.

First, if face_down, make it part of our n_mod data structure.

                    if (action_args.face_down) thing.n_mod += "face down; ";

Then, make sure that gets used:

-                    if (face == "UP") cl.card.face_up = true; // 
+                    if (fup) cl.card.face_up = true; // 
+                    if (fdown) cl.card.face_up = false; // 

That's 0.9.34.1.2.

So we *almost* have it. Except the data we send to the UI doesn't indicate that the card is face down at all.

    '{"id":1,"label":"Yyy","name":"SorcerySwan","colors":"GREEN","dp":5000,"level":4,"suspended":false,"stack":["CS3-06@GREEN@31","CS3-08@GREEN@30"],"plugs":[],"sa":1,"loc":4,"location":"BATTLE","summary":""}'

Making a specific UI do the right thing is out of scope. However, we must give the UI the information that it needs. This means marking it as face-down, and giving only the owning player the details aobut it.

The current format of the stack is cardid, comma-separated colors, and a ID that identifies a card as it moves around the field. Until today it was intended to track face-up cards. But it probably should track a face-down card, too. Once you place it, you can technically track it.

So what we want is
 - consistent ID for the card
 - always face down for other player
 - face down for owner, but, able to view it

Trying just 'back' for 0.9.34.1.3.








