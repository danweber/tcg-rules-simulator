
# How To Add New Parsing

Let's take a sample effect, <De-Evolve>. (There is already code to make devolve happen, we just need to hook up the front end.)

Sample sentence we want to parse, as a sentence

    Then, if this Monster is suspended, ＜De-Evolve 1＞ 1 of your opponent's Monster.

In the Nearly file for the grammar, look at "EffSentence." (Despite its name it can sometimes read more than one sentence.) You can see how we want this parsed:

    (Then, )                                      -> Discarded
    if this Monster is suspended,                 -> IfClause
    ＜De-Evolve 1＞ 1 of your opponent's Monster. -> Imperative

The IfClause is easy to add:

     ("If " | "if ") MultiTarget (" is " | " has ") "un":? "suspended, "

A very common test is if a thing exists, and "X is suspended" is easily enough rephased into "a suspended X".

     { raw_text:gv(d),
       type: 'IfClause',
       testtype: "TARGET_EXISTS",
       and: [ ... ]
     }

So into the "and" we put the tests necessary to test for a suspended X:

        and: [
            d[1],
            { raw_text: 'is suspended', suspended: true }            
        ]

Then to add the new action of <De-Evolve>:

    | "＜De-Evolve " Number "＞ " MultiTarget

and its return

     { raw_text:gv(d),  action: 'devolve', 
       target: d[2],
       number: gv(d[1])
     }

# How To Add Face-Down Cards

Let's walk through the entire process for adding face-down cards in sources. This is a really good example because it's going to up-end some prior assumptions and require changes at multiple levels.

## Test data format

There's no way of describing face-down cards in our test input or output. Obviously that's the first thing we need.

We have some precedent for face-up in security. In place of a REST status at the end, security can have FACEUP:

    SECURITY1:DW1-Van,FACEUP DW1-Van,FACEUP CS2-03,FACEUP DW1-Van

And for plugged cards:

    Four2,CS1-06,PLUG,CS3-Fairy

Let's merge these. Before each card that is faceup, let there be a FACEUP value.

So a normal stack is:

    Sample,DW1-Van,CS1-Garbage,CS1-Paper,CS1-Tiny

Now we'll make cards be facedown by adding FACEDOWN as a flag after each card.

    Sample,DW1-Van,FACEDOWN,CS1-Garbage,CS1-Paper,FACEDOWN,CS1-Tiny

This makes the 2nd and 4th cards from the top be facedown.

Off in Player.ts, we have the _set_up function. The second clause is optional but will let us force face-up if we ever need it.

                    if (text == "PLUG") {
                        plug = true;
                        continue;
                    }
                    if (text == "FACEDOWN") {
                        faceup = false;
                        continue;                        
                    }

Then, after we make a card, use the faceup value and reset it to default

                    if (c) {
                        c.face_up = faceup;
                        faceup = true; // return to default

In theory this is enough. And passing the sample text as input doesn't generate any errors. But we need to check on the output as well.

Output is handled in Instance.ts. (This isn't the same file as the input, and if you think that's a code-smell, you're right.)

        let body = this.pile.map(x => x.testname(testmode)).reverse();

`x.testname()` is how we dump card data for test output. That's where we need to label each card.

        let prefix = "";
        if (!this.face_up) {
            prefix = "FACEDOWN,";
        }

Then we make sure prefix is sent before each card.

Let's see the tests!

Input:

    VERSION:2
    FIELD1:Sample,DW1-Van,FACEDOWN,CS1-Garbage,CS1-Paper,FACEDOWN,CS1-Tiny
    GAME:P1 T3 MAIN 6
    DUMP

Output:

    FIELD1:Sample,FACEDOWN,DW1-Vanillamon,FACEDOWN,CS1-Garbagecanlid,FACEDOWN,CS1-Papershield,FACEDOWN,CS1-Tinyshield
    FIELD2:
    GAME:P1 T3 MAIN 6

Oh no! All cards are facedown. Back in Player.ts, cards were set up faceup or facedown, and then moved to their new location. Moving the card automatically flips it to the proper orientation for that location. (Check that code and see.) So, move the setting to after the card is moved:

                        if (plug) {
                            c.move_to(place, thing, "PLUG-BOTTOM");
                        } else {
                            c.move_to(place, thing, "BOTTOM");
                        }
                        c.face_up = faceup;

Note that we could technically have face-down linked card if we wanted. We're going to ignore that for this project but a fun follow-up could be seeing if a face-down link card is trashed at rule check. (I guess it should. But it's an undefined mechanic, so who knows?)

Now the output:

    FIELD1:Sample,DW1-Vanillamon,FACEDOWN,CS1-Garbagecanlid,CS1-Papershield,FACEDOWN,CS1-Tinyshield
    FIELD2:
    GAME:P1 T3 MAIN 6
    
Yes! Now run all the other tests...

... It turns out that the face-up-ness of field cards was never really tested. When cards were moved to instances we weren't marked the face-up-ness. Now they are explicitly marked as default face-up if moved to the field, otherwise face down.

To here, everything is 0.9.34.1.0.

## Parsing

So now let's get an effect working. When working with complicated effects, break them down into pieces. So we make a new test card, or modify an existing test card, to have this effect.
 
    You may place 1 card in your hand face down as this Monster's bottom evolution card.

Does this parse? Run `node ./parse-evocond.js` on a file with this as its content. Once it doesn't, try several variations.

    >> You may place 1 card in your hand face down as this Monster's bottom evolution card.
    null
    >> You may place 1 card in your hand as this Monster's bottom evolution card.
    null
    >> Place 1 card in your hand as this Monster's bottom evolution card.
    found 1 results for Place 1 card in your hand as this Monster's bottom evolution card.

So we needed to make sure that the specific kind of place worked, which involved added one more variation of "place" in the grammar.

Then we need to make sure that "place X face down" is accepted.

     | ("place " | "placing "|"Place ") MultiTarget " face down":? (" as "|" under ") MultiTarget ("'s bottom evolution card" | " as its bottom evolution card") " or under ":?  Target:?

Parse that and it works! (Long output elided.) But run through all the test cases before committing.

That's 0.9.34.1.1.

## Making the code do the right thing.

If you run the above effect, it does put a card into the place it should -- but face up. We're almost there!

(Also, a "put face up into security" effect was newly caught by the grammar. That's good, but the new code wasn't handling it. That was disabled in a way that you can see, do we're only fixing one thing at a time.)

A lot of the code needed was already here. All we needed to change was to make, instead of sometimes explicitly setting the card face up, was to also explicitly sometimes set the card face down.

First, if face_down, make it part of our n_mod data structure.

                    if (action_args.face_down) thing.n_mod += "face down; ";

Then, make sure that gets used:

-                    if (face == "UP") cl.card.face_up = true; // 
+                    if (fup) cl.card.face_up = true; // 
+                    if (fdown) cl.card.face_up = false; // 

That's 0.9.34.1.2.

So we *almost* have it. Except the data we send to the UI doesn't indicate that the card is face down at all.

    '{"id":1,"label":"Yyy","name":"SorcerySwan","colors":"GREEN","dp":5000,"level":4,"suspended":false,"stack":["CS3-06@GREEN@31","CS3-08@GREEN@30"],"plugs":[],"sa":1,"loc":4,"location":"BATTLE","summary":""}'

Making a specific UI do the right thing is out of scope. However, we must give the UI the information that it needs. This means marking it as face-down, and giving only the owning player the details aobut it.

The current format of the stack is cardid, comma-separated colors, and a ID that identifies a card as it moves around the field. Until today it was intended to track face-up cards. But it probably should track a face-down card, too. Once you place it, you can technically track it.

So what we want is
 - consistent ID for the card
 - always face down for other player
 - face down for owner, but, able to view it

Trying just 'back' for 0.9.34.1.3. This only gives us #2. We'll return later.

## Face-down cards have no effect (including no DP).

This is one of two big things left to implement, the other being recognizing face-down cards to search on.

Let's do rules-checks and "having no effect" together, because they're essentially the same problem. Any card that is checked for inheriteds, effects, or DP has none of it.

First thing is a test case.

    VERSION:2
    # the inherit of a facedown card doesn't exist. CS1-Paper's inherited gives 1 memory at turn start.  CS2-01 gives +1000 DP while you have a red.
    FIELD1:Inherited,DW1-Van,FACEDOWN,CS1-Paper,CS1-Paper,FACEDOWN,CS2-01 Red,CS2-ShieldSmasher
    GAME:P1 T3 HATCHING 5
    ECHO: should have 5000 DP and 9000 DP
    DUMP:DP
    CMD:MAIN
    STEP:AUTOANSWER:CAPTURE
    ECHO: -- main, gain just 1 mem
    DUMP:DP

Running it right now will have 2 problems: both [start of main] trigger, as does the +1000 passive boost.

Effects for an instance are only checked in a few places, so we're going to just add those checks that the card is still face up. And, it turns out, we need to make sure that cards in trash are considered face up as well. (We never bothered before!) Also, we were broadcasting what cards a player can choose to both players when the choices included hand or security. Let's fix all those.

-        this.face_up = !!(this.location & Location.FIELD); // mark as face down if any place but field
+        this.face_up = !!(this.location & (Location.FIELD | Location.ALLTRASH ); // mark as face down if any place but field or trash


+                if (w.td && (w.td.raw_text.includes("hand") || w.td.raw_text.includes("security"))) {
+                    secret = true;
+                }

-            ret.push(... this.pile[i].new_inherited_effects);
+            if (this.pile[i].face_up) {
+                ret.push(... this.pile[i].new_inherited_effects);
+            } else {
+                // ignore face down card in stack
+            }


                 for (let i = this.pile.length - 2; i >= 0; i--) {
+                    if (! this.pile[i].face_up) continue;
                     ret += " " + this.pile[i].name;

That's 0.9.34.1.4.

## Oops, face-down [on delete]

When something gets sent to trash, we need a 'snapshot' of its state at the moment of deletion. There are tests like "if this Monster *had* trait X, do a thing."

Background on deletion: the instance is sent to trash, individual cards are sent to trash, but they're not removed from the instance. (So could a card belong to several instances at once? That doesn't sound right.)

We are going to need to track the state of monsters at given points for things like "the played monster's level" which checks at prior state. This is a preview. So at removal we track the faced-ness if a custom array. Just need to make the code that checks for effects check this. (Other effects that check face_up are only checked after removal so we don't need to modify those.

(Maybe the face-up/face-down of the cards in the stack should be tracked all the time in the Instance. This would require significant changes, and possibly not even for a good benefit.)

That's 0.9.34.1.5. 0.9.34.1.7 has the updated grammar.

And we make sure 'for each' handles "this Monster's face-down evolution cards". 0.9.34.1.8

## Side quest: Let's make a Keyword

When we have several new things to add, it makes sense to break them up. So we make a new custom monster with this effect:

    In the main phase, by suspending this Monster, place your deck's top card face down as this Monster's bottom evolution card.

Primarily this is to handle the new timing of "In the main phase," which is nearly identical to a [main] effect except missing that keyword.

Right now timing words like [Main] are handled explicitly with special code, and not through the grammar at all. Handling through the grammar is probably the correct long-term decision, but for simplicity let's just treat it like [Main].

We need to make sure we can parse the placing. So an OtherTarget object is made to include "your deck's top card", and can be many other targets in the future.

Changes that are needed with this:

1. Selecting the first target is skipped if the target is a deck.

-             */   } else {
+             */   } else if (w.td.raw_text.includes("deck")) {
+                    logger.info("no first target, using deck " + w.td.raw_text);
+                    // no target selection needed
+                    this.s = FakeStep.ASK_TARGET2;
+                    return false;
+                } else {

2. We change TUCK to TARGETED_CARD_MOVE for this. (In reality, TUCK should disappear entirely.)

                     if ((thing.game_event === GameEvent.TUCK || thing.game_event === GameEvent.FIELD_TO_SECURITY) &&
-                        target.raw_text.includes(" card ")) {
+                        target.raw_text.includes(" card ") || target.raw_text.includes("deck")) {
                         thing.game_event = GameEvent.TARGETED_CARD_MOVE;
+                        logger.info("changing game event to TARGETED_CARD_MOVE for " + target.raw_text);
                     }
 
3. The terminus effect for TARGETED_CARD_MOVE was re-factored so that the initial target can be an Instance, a CardLocation, or an OtherTarget. It now just ends like this:

+            logger.info(`prepping to move ${mover.get_name()}`);
+            mover.move_to(location, target_instance, order);
+            if (fup) mover.face_up = true; // 
+            if (fdown) mover.face_up = false; // 

There is also a cheat to translate "In the main phase, " into "[Main]". 

All that was added as 0.9.34.1.9.

Let's finish it up. We want effects to be useable in the breeding area. 

We need to be able to move things to the breeding area, which wasn't needed before this:

-        } else if (location == Location.BATTLE) {
+        } else if (location == Location.BATTLE || location == Location.EGGZONE) {
             if (mode === "plug")
                 this.pile = g.get_instance(instance_id).plugged;
             else
                 this.pile = g.get_instance(instance_id).pile;
+            if (g.get_instance(instance_id).location !== location) this.pile = [];

When looking for main effects, we look in the eggzone....

-        for (let mon of this.field) {
+        let my_mons = [ ...(this.egg_zone ? [this.egg_zone]: []), ...this.field]; 
+        for (let mon of my_mons) {

... making sure to demand that the effect exists in the proper zone so all our other effects don't trigger in breeding:

-        // assume that instances only exist on field
-        ret = ret.filter(x => !x.active_zone);
+        // active zone is either blank, or includes BATTLE
+        ret = ret.filter(x => !x.active_zone  || x.active_zone & Location.BATTLE   );


And we need to search the breeding area for effects that can see it:

-            let tgts = game.find_target(w.td, w.game_event, source, sel, Location.SECURITY);
+
+            let zone = Location.SECURITY;
+            if (sel.effect.active_zone && sel.effect.active_zone & Location.EGGZONE) {
+                zone |= Location.FIELD;
+            }
+            let tgts = game.find_target(w.td, w.game_event, source, sel, zone);

And then, we can make our new keyword:

    ＜Loading＞ (In the main phase, by suspending this Monster, place your deck's top card face down as this Monster's bottom evolution card. This effect can also activate in the breeding area.)

Once the engine sees this keyword with its reminder text once, it will apply the same reminder text every time it sees it!

That's version 0.9.34.1.10! Nice side-quest!

Oops, the card was going in face-up when sent from deck. You can see the bug fix in 0.9.34.1.11 for that. Pretty easy.

## More things to catch

We had to:
  - make the face-up persist when raising
  - no overflow when face-down sent to trash

